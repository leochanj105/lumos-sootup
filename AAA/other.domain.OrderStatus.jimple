public final enum class other.domain.OrderStatus extends java.lang.Enum
{
/*Signature: Ljava/lang/Enum<Lother/domain/OrderStatus;>;*/
/*OrderStatus.java*/
    public static final enum other.domain.OrderStatus NOTPAID;
    public static final enum other.domain.OrderStatus PAID;
    public static final enum other.domain.OrderStatus COLLECTED;
    public static final enum other.domain.OrderStatus CHANGE;
    public static final enum other.domain.OrderStatus CANCEL;
    public static final enum other.domain.OrderStatus REFUNDS;
    public static final enum other.domain.OrderStatus USED;
    private int code;
    private java.lang.String name;
    private static final other.domain.OrderStatus[] ENUM$VALUES;

    static void <clinit>()
    {
        other.domain.OrderStatus[] $stack7;
        other.domain.OrderStatus $stack0, $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack8, $stack9, $stack10, $stack11, $stack12, $stack13, $stack14;

        $stack0 = new other.domain.OrderStatus;
/*5*/

        specialinvoke $stack0.<other.domain.OrderStatus: void <init>(java.lang.String,int,int,java.lang.String)>("NOTPAID", 0, 0, "Not Paid");
/*5*/

        <other.domain.OrderStatus: other.domain.OrderStatus NOTPAID> = $stack0;
/*5*/

        $stack1 = new other.domain.OrderStatus;
/*6*/

        specialinvoke $stack1.<other.domain.OrderStatus: void <init>(java.lang.String,int,int,java.lang.String)>("PAID", 1, 1, "Paid & Not Collected");
/*6*/

        <other.domain.OrderStatus: other.domain.OrderStatus PAID> = $stack1;
/*6*/

        $stack2 = new other.domain.OrderStatus;
/*7*/

        specialinvoke $stack2.<other.domain.OrderStatus: void <init>(java.lang.String,int,int,java.lang.String)>("COLLECTED", 2, 2, "Collected");
/*7*/

        <other.domain.OrderStatus: other.domain.OrderStatus COLLECTED> = $stack2;
/*7*/

        $stack3 = new other.domain.OrderStatus;
/*8*/

        specialinvoke $stack3.<other.domain.OrderStatus: void <init>(java.lang.String,int,int,java.lang.String)>("CHANGE", 3, 3, "Cancel & Rebook");
/*8*/

        <other.domain.OrderStatus: other.domain.OrderStatus CHANGE> = $stack3;
/*8*/

        $stack4 = new other.domain.OrderStatus;
/*9*/

        specialinvoke $stack4.<other.domain.OrderStatus: void <init>(java.lang.String,int,int,java.lang.String)>("CANCEL", 4, 4, "Cancel");
/*9*/

        <other.domain.OrderStatus: other.domain.OrderStatus CANCEL> = $stack4;
/*9*/

        $stack5 = new other.domain.OrderStatus;
/*10*/

        specialinvoke $stack5.<other.domain.OrderStatus: void <init>(java.lang.String,int,int,java.lang.String)>("REFUNDS", 5, 5, "Refunded");
/*10*/

        <other.domain.OrderStatus: other.domain.OrderStatus REFUNDS> = $stack5;
/*10*/

        $stack6 = new other.domain.OrderStatus;
/*11*/

        specialinvoke $stack6.<other.domain.OrderStatus: void <init>(java.lang.String,int,int,java.lang.String)>("USED", 6, 6, "Used");
/*11*/

        <other.domain.OrderStatus: other.domain.OrderStatus USED> = $stack6;
/*11*/

        $stack7 = newarray (other.domain.OrderStatus)[7];
/*3*/

        $stack8 = <other.domain.OrderStatus: other.domain.OrderStatus NOTPAID>;
/*3*/

        $stack7[0] = $stack8;
/*3*/

        $stack9 = <other.domain.OrderStatus: other.domain.OrderStatus PAID>;
/*3*/

        $stack7[1] = $stack9;
/*3*/

        $stack10 = <other.domain.OrderStatus: other.domain.OrderStatus COLLECTED>;
/*3*/

        $stack7[2] = $stack10;
/*3*/

        $stack11 = <other.domain.OrderStatus: other.domain.OrderStatus CHANGE>;
/*3*/

        $stack7[3] = $stack11;
/*3*/

        $stack12 = <other.domain.OrderStatus: other.domain.OrderStatus CANCEL>;
/*3*/

        $stack7[4] = $stack12;
/*3*/

        $stack13 = <other.domain.OrderStatus: other.domain.OrderStatus REFUNDS>;
/*3*/

        $stack7[5] = $stack13;
/*3*/

        $stack14 = <other.domain.OrderStatus: other.domain.OrderStatus USED>;
/*3*/

        $stack7[6] = $stack14;
/*3*/

        <other.domain.OrderStatus: other.domain.OrderStatus[] ENUM$VALUES> = $stack7;
/*3*/

        return;
/*3*/
    }

/*[null, null, code, name]*/
    private void <init>(java.lang.String, int, int, java.lang.String)
    {
        other.domain.OrderStatus this;
        int l2, code;
        java.lang.String l1, name;

        this := @this: other.domain.OrderStatus;

        l1 := @parameter0: java.lang.String;

        l2 := @parameter1: int;

        code := @parameter2: int;

        name := @parameter3: java.lang.String;

        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(l1, l2);
/*16*/

        this.<other.domain.OrderStatus: int code> = code;
/*17*/

        this.<other.domain.OrderStatus: java.lang.String name> = name;
/*18*/

        return;
/*19*/
    }

    public int getCode()
    {
        int $stack1;
        other.domain.OrderStatus this;

        this := @this: other.domain.OrderStatus;

        $stack1 = this.<other.domain.OrderStatus: int code>;
/*22*/

        return $stack1;
/*22*/
    }

    public java.lang.String getName()
    {
        other.domain.OrderStatus this;
        java.lang.String $stack1;

        this := @this: other.domain.OrderStatus;

        $stack1 = this.<other.domain.OrderStatus: java.lang.String name>;
/*26*/

        return $stack1;
/*26*/
    }

    public static java.lang.String getNameByCode(int)
    {
        other.domain.OrderStatus[] $stack6;
        other.domain.OrderStatus orderStatus, $stack11;
        int l4, $stack7, code, l3;
        java.lang.String $stack10, $stack12;

        code := @parameter0: int;

        $stack6 = staticinvoke <other.domain.OrderStatus: other.domain.OrderStatus[] values()>();
/*30*/

        l4 = lengthof $stack6;
/*31*/

        l3 = 0;
/*31*/

        goto label3;
/*31*/

     label1:
        orderStatus = $stack6[l3];
/*31*/

        $stack7 = virtualinvoke orderStatus.<other.domain.OrderStatus: int getCode()>();
/*32*/

        if $stack7 != code goto label2;
/*32*/

        $stack10 = virtualinvoke orderStatus.<other.domain.OrderStatus: java.lang.String getName()>();
/*33*/

        return $stack10;
/*33*/

     label2:
        l3 = l3 + 1;
/*31*/

     label3:
        if l3 < l4 goto label1;
/*31*/

        $stack11 = $stack6[0];
/*36*/

        $stack12 = virtualinvoke $stack11.<other.domain.OrderStatus: java.lang.String getName()>();
/*36*/

        return $stack12;
/*36*/
    }

    public static other.domain.OrderStatus[] values()
    {
        other.domain.OrderStatus[] $stack3, $stack5;
        int $stack4;

        $stack3 = <other.domain.OrderStatus: other.domain.OrderStatus[] ENUM$VALUES>;
/*1*/

        $stack4 = lengthof $stack3;
/*1*/

        $stack5 = newarray (other.domain.OrderStatus)[$stack4];
/*1*/

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($stack3, 0, $stack5, 0, $stack4);
/*1*/

        return $stack5;
/*1*/
    }

    public static other.domain.OrderStatus valueOf(java.lang.String)
    {
        java.lang.String l0;
        other.domain.OrderStatus $stack2;
        java.lang.Enum $stack1;

        l0 := @parameter0: java.lang.String;

        $stack1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lother/domain/OrderStatus;", l0);
/*1*/

        $stack2 = (other.domain.OrderStatus) $stack1;
/*1*/

        return $stack2;
/*1*/
    }
}
