public class other.queue.ExecutorConfig extends java.lang.Object
{
/*ExecutorConfig.java*/
/*Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Lorg/springframework/context/annotation/Configuration; without elements
Annotation type: Lorg/springframework/scheduling/annotation/EnableAsync; without elements
*/
/*[inner=java/util/concurrent/ThreadPoolExecutor$CallerRunsPolicy, outer=java/util/concurrent/ThreadPoolExecutor, name=CallerRunsPolicy,flags=9]*/
    private int corePoolSize;
    private int maxPoolSize;
    private int queueCapacity;

    public void <init>()
    {
        other.queue.ExecutorConfig this;

        this := @this: other.queue.ExecutorConfig;

        specialinvoke this.<java.lang.Object: void <init>()>();
/*13*/

        this.<other.queue.ExecutorConfig: int corePoolSize> = 10;
/*16*/

        this.<other.queue.ExecutorConfig: int maxPoolSize> = 200;
/*18*/

        this.<other.queue.ExecutorConfig: int queueCapacity> = 10;
/*20*/

        return;
/*13*/
    }

/*Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Lorg/springframework/context/annotation/Bean; without elements
*/
    public java.util.concurrent.Executor mySimpleAsync()
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor $u0;
        java.util.concurrent.Executor $r0;
        int $stack3, $stack4, $stack5;
        other.queue.ExecutorConfig this;

        this := @this: other.queue.ExecutorConfig;

        $u0 = new org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
/*24*/

        specialinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void <init>()>();
/*24*/

        $stack3 = this.<other.queue.ExecutorConfig: int corePoolSize>;
/*25*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setCorePoolSize(int)>($stack3);
/*25*/

        $stack4 = this.<other.queue.ExecutorConfig: int maxPoolSize>;
/*26*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setMaxPoolSize(int)>($stack4);
/*26*/

        $stack5 = this.<other.queue.ExecutorConfig: int queueCapacity>;
/*27*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setQueueCapacity(int)>($stack5);
/*27*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setThreadNamePrefix(java.lang.String)>("MySimpleExecutor-");
/*28*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void initialize()>();
/*29*/

        $r0 = (java.util.concurrent.Executor) $u0;

        return $r0;
/*30*/
    }

/*Visibility Annotation: level: RUNTIME (runtime-visible)
 Annotations:
Annotation type: Lorg/springframework/context/annotation/Bean; without elements
*/
    public java.util.concurrent.Executor myAsync()
    {
        org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor $u0;
        java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy $u1;
        java.util.concurrent.Executor $r0;
        int $stack3, $stack4, $stack5;
        other.queue.ExecutorConfig this;

        this := @this: other.queue.ExecutorConfig;

        $u0 = new org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
/*35*/

        specialinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void <init>()>();
/*35*/

        $stack3 = this.<other.queue.ExecutorConfig: int corePoolSize>;
/*36*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setCorePoolSize(int)>($stack3);
/*36*/

        $stack4 = this.<other.queue.ExecutorConfig: int maxPoolSize>;
/*37*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setMaxPoolSize(int)>($stack4);
/*37*/

        $stack5 = this.<other.queue.ExecutorConfig: int queueCapacity>;
/*38*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setQueueCapacity(int)>($stack5);
/*38*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setThreadNamePrefix(java.lang.String)>("MyExecutor-");
/*39*/

        $u1 = new java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy;
/*43*/

        specialinvoke $u1.<java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy: void <init>()>();
/*43*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void setRejectedExecutionHandler(java.util.concurrent.RejectedExecutionHandler)>($u1);
/*43*/

        virtualinvoke $u0.<org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor: void initialize()>();
/*44*/

        $r0 = (java.util.concurrent.Executor) $u0;

        return $r0;
/*45*/
    }
}
